L0:
# Initialize main frame pointer.
fp = sp - 116
# Return address info is always generated, but has no purpose in main.
*(fp) = 0
*(fp - 4) = 0
*(fp - 8) = 0
*(fp - 12) = 0 # There is no old nesting entry for the main function (since it cannot call itself recursively).
nest[0] = fp # Set nesting entry for this function to new activation record.
*(fp - -16) = 0 # No t1 value worth caring about yet.
*(fp - -20) = 0 # No t2 value worth caring about yet.
*(fp - -24) = 0 # No t3 value worth caring about yet.
*(fp - -28) = 0 # No t4 value worth caring about yet.
*(fp - -32) = 0 # No t5 value worth caring about yet.
*(fp - -36) = 0 # No t6 value worth caring about yet.
*(fp - -40) = 0 # No t7 value worth caring about yet.
j L1
# Error handler for out-of-bounds array access
IndexOutOfBounds:
print "Index $t2 is outside of array bounds $t3 .. $t4. Abort."
L1:
f4 = 2.1
*(fp - 80) = f4 # Store temp
f4 = 7.2
*(fp - 84) = f4 # Store temp
t2 = fp - 80
f6 = *(t2)
t3 = fp - 84
f8 = *(t3)
t1 = t2 * t3
*(fp - 76) = f4 # Store temp
t1 = 14
*(fp - 92) = t1 # Store temp
t1 = 4
*(fp - 96) = t1 # Store temp
t2 = *(fp - 92)
f6 = real(t2)
t3 = *(fp - 96)
f8 = real(t3)
f4 = f6 / f8
*(fp - 88) = f4 # Store temp
t2 = fp - 76
f6 = *(t2)
t3 = fp - 88
f8 = *(t3)
t1 = t2 + t3
*(fp - 72) = f4 # Store temp
t1 = nest[0] # Get stackframe for main
t1 = t1 - 68 # Local: &r
t2 = fp - 72
f4 = *(t2)
*(t1) = f4 # Store value into a variable
t1 = nest[0] # Get stackframe for main
t1 = t1 - 68 # Local: &r
*(fp - 100) = t1 # Store temp
t1 = fp - 100
t1 = *(fp - 100)
f12 = *(t1)
writereal(f12)
t1 = "
"
*(fp - 104) = t1 # Store temp
t1 = *(fp - 104)
writechar(t1)
t1 = 42
*(fp - 112) = t1 # Store temp
# Array index (subscript #0 - part one)
t1 = 1
*(fp - 108) = t1 # Store temp
t1 = nest[0] # Get stackframe for main
t1 = t1 - 44 # Local: &test
# Array index (subscript #0 - part two)
t2 = *(fp - 108)
t3 = 5 # lower bound 
t4 = 10 # upper bound
if (t2 < t3) jmp IndexOutOfBounds # i < 0? error.
if (t2 >= t4) jmp IndexOutOfBounds # i >= len? error.
t2 += -5 # We need to reposition relative to the actual memory location.
t3 = 4 # t3 = sizeof(array subtype).
t2 *= t3 # t2 = t2 * sizeof(array subtype).
t1 += t2 # base += t2
t2 = *(fp - 112)
*(t1) = t2 # Store value into a variable
# Exit the program.
exit
