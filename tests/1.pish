{ (* Nested comments are allowed *) }
(* { Nested comments are allowed -- this way, too! } *)
(* Should still be an open comment (star was attached to left paren). Yay for comment toggles! *)
program example(input, ouput);
    const PI = 3.14159;
       NEGATIVE_PI = -PI;
       START_NUM = -4;
       END_NUM = -START_NUM;
       TEXT = 'I saw this in an example so I copied it.';

    { Record definition, seems simple enough. }
    type Polygon = record
        { Wait. Oh god no. Array of record? Nooooo }
        vertices : array [START_NUM .. END_NUM] of record
            data : array [1 .. 3] of REAL;
	end;
    end;

    { I HOPE YOU CHECK CASE INSENSITIVITY LATER. }
    var polygons : array [1 .. 2] of POLYGON;
    x, y : Integer;
    I : InTegeR;

    { forward declaration }
    procedure gcd(); forward;

    procedure swap(a, b : Integer);
        var tmp : Integer;
        
        { nested function }
        procedure foo();
            { nested function in nested function }
            procedure bar();
                { I think you get it. }
                procedure barf();
                begin
                end;
            begin
            end;
        begin
        end;
    begin
        tmp := a;
        a := b;
        b := tmp
    end;

    function gcd(a, b : Integer) : Integer;
    begin
        if b = 0 then gcd := a
        else gcd := gcd(b, a mod b)
    end;
begin
    polygon[1].vertices[END_NUM].data[1] := 1;
    polygon[2].vertices[-START_NUM].data[2] := -4;
    polygon[1].vertices[-START_NUM + 2].data[3] := 7456;
    
    polygon[2].vertices[2].data[1] := 34;
    polygon[1].vertices[0].data[2] := 4;
    polygon[2].vertices[3].data[3] := 12;
    
    FoR I := 10 downto 2 do
    begin
	write ( I )
    end;

    wHiLe I < 10 do
    begin
	I := I + 1
    end;

    polygon     [    2     ] .   vertices [    { Does whitespace and comments kill me? } 1 ].data [ 1 ] := PI;
	read(x, y);
	if y > x then
        swap(x, y);
	write(gcd(x, y))
end.
